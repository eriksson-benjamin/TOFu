<class 'numpy.float64'>
<class 'numpy.float64'>
<class 'numpy.float64'>
<class 'numpy.float64'>
Wrote profile results to time_profiler.py.lprof
Timer unit: 1e-06 s

Total time: 0.50611 s
File: /home/beriksso/TOFu/analysis/benjamin/github/TOFu/optimization/time_pickoff_CFD/tp_CFD.py
Function: linear_regression at line 4

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     4                                           @profile
     5                                           def linear_regression(x_data, y_data, timer = False):
     6                                               '''
     7                                               Returns the slope (A) and intersection (B) for a simple linear regression on x and y data.
     8                                               x_data: 2D array of values where each row corresponds to one event to perform linear regression on
     9                                               y_data: 2D array of values where each row corresponds to one event to perform linear regression on
    10                                               product_1, product_2 and product_3 correspond to the three products for calculating beta in 
    11                                               https://en.wikipedia.org/wiki/Simple_linear_regression
    12                                               '''
    13                                           #    if timer: t_start = elapsed_time()
    14                                               
    15                                               # Find average
    16         4      55276.0  13819.0     10.9      x_mean = np.mean(x_data, axis = 1)
    17         4      55308.0  13827.0     10.9      y_mean = np.mean(y_data, axis = 1)
    18                                               
    19         4      22901.0   5725.2      4.5      product_1 = np.transpose(np.transpose(x_data) - x_mean)
    20         4      22804.0   5701.0      4.5      product_2 = np.transpose(np.transpose(y_data) - y_mean)
    21         4      47199.0  11799.8      9.3      product_3 = product_1 ** 2
    22                                               
    23                                               # Calculate slopes and intersection (y = slope*x + intercept)
    24         4     173437.0  43359.2     34.3      slope = np.sum(product_1 * product_2, axis = 1) / np.sum(product_3, axis = 1)
    25         4     129171.0  32292.8     25.5      intercept = np.mean(y_data, axis = 1) - slope * x_mean
    26                                               
    27                                           #    if timer: elapsed_time(t_start, 'linear_regression()')    
    28         4         14.0      3.5      0.0      return slope, intercept

Total time: 1.00781 s
File: /home/beriksso/TOFu/analysis/benjamin/github/TOFu/optimization/time_pickoff_CFD/tp_CFD.py
Function: find_points at line 51

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    51                                           @profile
    52                                           def find_points(pulse_data, value, timer = False):
    53                                               '''
    54                                               Returns the index of the point closest to "value" in pulse_data.
    55                                               pulse_data: array of pulse height data where each row corresponds to one record. 
    56                                                           NOTE: pulse_data must be baseline reduced (see baseline_reduction() function).
    57                                               value: one dimensional array of values for which you want to find the closest index in pulse_data 
    58                                               '''
    59                                           #    if timer: t_start = elapsed_time()
    60                                               
    61                                               # Subtract the constant fraction value from the data set
    62                                           
    63         4     956100.0 239025.0     94.9      mask = subtract_values.subtract_values(pulse_data, value[:, np.newaxis])
    64         4      51695.0  12923.8      5.1      index = np.argmax(mask, axis = 1) 
    65                                               
    66                                           #    if timer: elapsed_time(t_start, 'find_points()')
    67         4         13.0      3.2      0.0      return index  

Total time: 2.08964 s
File: /home/beriksso/TOFu/analysis/benjamin/github/TOFu/optimization/time_pickoff_CFD/tp_CFD.py
Function: time_pickoff_CFD at line 70

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    70                                           @profile
    71                                           def time_pickoff_CFD(pulse_data, fraction = 0.3, timer = False):
    72                                               '''
    73                                               Returns the times of arrival for a 2D array of pulses using a constant
    74                                               fraction + linear interpolation method.
    75                                               pulse_data: 2D array of pulses where each row corresponds to one pulse
    76                                               fraction: fraction at which to perform linear interpolation
    77                                               return a 1D array of times-of-arrival for each pulse.
    78                                               '''
    79                                               
    80         1       3255.0   3255.0      0.2      new_time = np.zeros([len(pulse_data)])
    81                                           
    82                                               # Determine whether data needs to be chunked or not
    83         1         10.0     10.0      0.0      if len(pulse_data) > 5E+5: chunk_data = True
    84                                               else: chunk_data = False
    85                                           
    86                                           #    if timer: t_start = elapsed_time()
    87         1          1.0      1.0      0.0      if chunk_data:
    88                                                   # Chunk array in chunks of ~5E5 rows
    89         1         36.0     36.0      0.0          n_chunks = int(np.ceil(len(pulse_data) / 5E+5))
    90         1        151.0    151.0      0.0          chunked_data = np.array_split(pulse_data, n_chunks, axis = 0)
    91                                                   
    92                                           
    93                                               else: chunked_data = [pulse_data]
    94         1          1.0      1.0      0.0      new_time_counter = 0
    95         5          7.0      1.4      0.0      for pulse_data in chunked_data:
    96                                                   # Find the minima and a fraction of the minima
    97         4     246422.0  61605.5     11.8          minima = np.min(pulse_data, axis = 1)
    98         4      19541.0   4885.2      0.9          minima_fraction = minima * fraction
    99         4        136.0     34.0      0.0          print(type(minima_fraction[0]))
   100                                                   # Find position of minimum
   101                                               #    minima_pos = np.argmin(pulse_data, axis = 1)
   102                                               #    print('Warning: ' + str(len(minima_pos[minima_pos < 100])) + ' pulses have minimum before 10 ns.')
   103                                                   
   104                                               
   105                                                   # Find the index of the point closest to the fraction of the minimum
   106                                                   # Look only in the first 25 ns (leading edge) of the pulse
   107         4    1010832.0 252708.0     48.4          x_closest = find_points(pulse_data[:, 0:250], minima_fraction, timer = timer)
   108                                               
   109                                               
   110                                                   # Set up for simple linear regression
   111         4       3864.0    966.0      0.2          reg_x = np.zeros([len(x_closest), 3])
   112         4       3973.0    993.2      0.2          reg_y = np.zeros([len(x_closest), 3])
   113         4       4024.0   1006.0      0.2          array_1D = np.arange(0, len(pulse_data), 1)
   114                                                   
   115                                                   # Choose the three points on which to perform simple linear regression
   116         4      70063.0  17515.8      3.4          reg_y[:, 0] = pulse_data[array_1D, x_closest - 1]
   117         4      59261.0  14815.2      2.8          reg_y[:, 1] = pulse_data[array_1D, x_closest]
   118         4      61135.0  15283.8      2.9          reg_y[:, 2] = pulse_data[array_1D, x_closest + 1]
   119                                               
   120         4      13683.0   3420.8      0.7          reg_x[:, 0] = x_closest - 1
   121         4       5277.0   1319.2      0.3          reg_x[:, 1] = x_closest
   122         4       7453.0   1863.2      0.4          reg_x[:, 2] = x_closest + 1
   123                                                   
   124                                                   # Perform simple linear regression
   125         4     506388.0 126597.0     24.2          slopes, intercepts = linear_regression(reg_x, reg_y, timer = timer)
   126                                                   # Solve the y = kx + m equation for x. y = minima_fraction
   127         4      74112.0  18528.0      3.5          new_time[new_time_counter:len(pulse_data)+new_time_counter] = (minima_fraction - intercepts) / slopes
   128         4         15.0      3.8      0.0          new_time_counter += len(pulse_data)
   129                                                   
   130                                           
   131                                           #    if timer: elapsed_time(t_start, 'time_pickoff_CFD()')
   132         1          1.0      1.0      0.0      return new_time

